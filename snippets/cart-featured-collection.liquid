<style>
   .cart-featured-collection-wrapper .slide-dots{
  text-align: center;
  }
   .cart-featured-collection-wrapper  .slide-dots li{
    display: inline-block;
    margin: 0 15px;
  }
   .cart-featured-collection-wrapper  .slide-dots li button{
      position: relative;
      text-indent: -9999px;
   }
      .cart-featured-collection-wrapper  .slide-dots li button:before{
        content: '';
        font-size: 20px;
        text-indent: 0px;
        position: absolute;
        top: 0;
        left: 0;
      }
 .cart-featured-collection-wrapper .box.product select[id*=ProductSelect-] {
    width: 95%;
    height: 27px;
    padding: 0 3px;
    border-radius: 5px;
    font-size: 10px !important;
} 
 .cart-featured-collection-wrapper   .product-title {
    font-size: 12px;
}
 .cart-featured-collection-wrapper  figcaption span.price span {
    font-size: 12px;
}
  .cart-featured-collection-wrapper .simple-collection input.btn.btn-primary {
    font-size: 12px !important;
    padding: 2px 5px !important;
    margin-top: 0;
}
 .cart-featured-collection-wrapper ul.product-swatches.product-swatches--circle > li>  a > .product-swatches__color {
    width: 15px;
    height: 15px;
}

  </style>
<div class="simple-collection layout-{{ section.settings.cart_product_count_range }}" data-section-id="{{ section.id }}" data-section-type="simple-collection-section">
  <div class="wrapper">
    <header{% if section.settings.center_heading %} class="centered"{% endif %}>
      {% if section.settings.title != blank %}
        <h4>{{ section.settings.title | escape }}</h4>
      {% endif %}
      {% if section.settings.button_link != blank and section.settings.button_label != blank %}
        <a href="{{ section.settings.button_link }}" class="button outline">{{ section.settings.button_label | escape }}</a>
      {% endif %}
    </header>
    <div class="product-container owl-carousel" id="collection2-{{ section.id }}">
      {%- assign collection = collections[section.settings.collection] -%}
      {%- assign product_limit = section.settings.cart_product_count_range -%}
      {% for product in collection.products limit: product_limit  %}
        {% include 'product-grid-item' %}
      {% else %}
        {% for i in (1..product_limit) %}
          {% include 'placeholder-product-grid-item' %}
        {% endfor %}
      {% endfor %}
    </div>
  </div>
</div>

<script type="text/javascript" src="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js"></script>

<script>


var swatchVal,swatchVal2;
$('.box.product .product-swatches__li').click(function(){
    swatchVal = $(this).find('.product-swatches__label').text();
});
$('.box.product select[id*=ProductSelect-]').change(function(){
    swatchVal2 = $(this).val();
    $('span.error-size').remove();
});
$('.simple-collection .box.product input.btn.btn-primary').click(function(){
  swatchVal = $(this).parents('.box.product').find('.product-swatches__li a.product-swatches__link--selected .product-swatches__label').text();
  swatchVal2 = $(this).parents('.box.product').find('select[id*=ProductSelect-]').val();
console.log(swatchVal+"  ++ "+swatchVal2)
  $(this).parents('.box.product').find('#variant-select option').each(function(){
        if($(this).attr('data-title')==swatchVal+" / "+swatchVal2 || $(this).attr('data-title')==swatchVal2+" / "+swatchVal || $(this).attr('data-title')==swatchVal2){ 
             $(this).attr("selected","selected");  
        }
    });
   var oriValue = $(this).parents('.box.product').find('#variant-select').val();
  
 if(oriValue == '' ){
  
   $("<span class='error-size'>Please select your size</span>").insertAfter(this);

 }else{
  let formData = {
   'items': [{
    'id': oriValue,
    'quantity':1
    }]
  };
    fetch(window.Shopify.routes.root + 'cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(()=>{
      setTimeout(() => {
        this.setAttribute('value','Add To Cart');
      }, "3000")
      this.setAttribute('value','Added');
      this.previousSibling.previousSibling.style.display = "none";
      jQuery.getJSON('/cart.js', function(cart) { jQuery("#CartCount").text(cart.item_count); });
    })
    .catch((error) => {
      console.error('Error:', error);
    });
 }

});
  
//   if ($(window).width() <= 650) {
// $('#collection2-{{ section.id }}').slick({
//   arrows: false,
//   autoplay: false,
//   dots:true,
//   autoplaySpeed: 2000,
//    slidesToShow: 2,
//   slidesToScroll: 1
// });
// }
  $('#collection2-{{ section.id }}').slick({
  dots: true,
  infinite: false,
    arrows:false,
  speed: 300,
    dotsClass: 'slide-dots',
  slidesToShow: 4,
  slidesToScroll: 4,
  responsive: [
    {
      breakpoint: 1024,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3,
        infinite: true,
        dots: true
      }
    },
    {
      breakpoint: 600,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 1
      }
    },
    {
      breakpoint: 480,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 1
      }
    }
    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
  ]
});
</script>